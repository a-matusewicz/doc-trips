# Generated by Django 2.0.4 on 2018-04-13 17:06

from django.db import migrations, models
import django.db.models.deletion


def populate_score_values(apps, schema_editor):
    ScoreValue = apps.get_model('applications', 'ScoreValue')
    Score = apps.get_model('applications', 'Score')
    TripsYear = apps.get_model('core', 'TripsYear')

    for trips_year in TripsYear.objects.all():
        if trips_year.pk in [2015, 2016, 2017]:
            values = {
                v: ScoreValue.objects.create(value=v, trips_year=trips_year,
                                             description=d)
                for v, d in [
                    (1, "Bad application -- I really don't want this person to be a "
                     "volunteer and I have serious concerns"),
                    (2, "Poor application -- I have some concerns about this person "
                     "being a Trips volunteer"),
                    (3, "Fine application -- This person might work well as a "
                     "volunteer but I have some questions"),
                    (4, "Good application -- I would consider this person to be a "
                     "volunteer but I wouldn't be heartbroken if they were not "
                     "selected"),
                    (5, "Great application -- I think this person would be a "
                     "fantastic volunteer"),
                    (6, "Incredible application -- I think this person should be one "
                     "of the first to be selected to be a volunteer. I would be very "
                     "frustrated/angry if this person is not selected")]}

        elif trips_year.pk == 2018:
            values = {
                v: ScoreValue.objects.create(value=v, trips_year=trips_year,
                                             description=d)
                for v, d in [
                    (1, "Bad application -- I really don't want this person to be a "
                     "volunteer and I have serious concerns"),
                    (1.5, ""),
                    (2, "Poor application -- I have some concerns about this person "
                     "being a Trips volunteer"),
                    (2.5, ""),
                    (3, "Fine application -- This person might work well as a "
                     "volunteer but I have some questions"),
                    (3.5, ""),
                    (4, "Good application -- I would consider this person to be a "
                     "volunteer but I wouldn't be heartbroken if they were not "
                     "selected"),
                    (4.5, ""),
                    (5, "Great application -- I think this person would be a "
                     "fantastic volunteer")]}

        for score in Score.objects.filter(trips_year=trips_year):
            if score.leader_score is not None:
                score.fk_leader_score = values[score.leader_score]
            if score.croo_score is not None:
                score.fk_croo_score = values[score.croo_score]
            score.save()


class Migration(migrations.Migration):

    dependencies = [
        ('applications', '0110_scorevalue'),
    ]

    operations = [
        migrations.AddField(
            model_name='score',
            name='fk_croo_score',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='croo_scores', to='applications.ScoreValue'),
        ),
        migrations.AddField(
            model_name='score',
            name='fk_leader_score',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='leader_scores', to='applications.ScoreValue'),
        ),
        migrations.RunPython(populate_score_values)
    ]
