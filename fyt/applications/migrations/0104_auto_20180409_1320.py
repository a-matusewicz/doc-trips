# Generated by Django 2.0.4 on 2018-04-09 17:20

import logging
from datetime import datetime
from django.utils import timezone
from django.db import migrations, IntegrityError, transaction

YEARS = [2015, 2016]

log = logging.getLogger(__name__)

"""
Big messy migration.

This converts the legacy Leader/Croo application grades and skips
to the new Score format.

This converts the QualificationTag M2M to text fields, along with hard/soft
skills.

There are some grades that violate the unique constraints of score, and
so an extra grader object is created to hold onto those scores -most of them
are duplicates anyway.
"""

def merge_legacy_scores(apps, schema_editor):
    LeaderApplicationGrade = apps.get_model('applications', 'LeaderApplicationGrade')
    CrooApplicationGrade = apps.get_model('applications', 'CrooApplicationGrade')
    Score = apps.get_model('applications', 'Score')
    ScoreQuestion = apps.get_model('applications', 'ScoreQuestion')
    ScoreComment = apps.get_model('applications', 'ScoreComment')
    QualificationTag = apps.get_model('applications', 'QualificationTag')
    SkippedLeaderGrade = apps.get_model('applications', 'SkippedLeaderGrade')
    SkippedCrooGrade = apps.get_model('applications', 'SkippedCrooGrade')
    Skip = apps.get_model('applications', 'Skip')
    Grader = apps.get_model('applications', 'Grader')
    TripsYear = apps.get_model('core', 'TripsYear')

    # Catch-all user on which to stash duplicate grades that
    # would otherwise break uniqueness constraints
    magic_man = Grader.objects.create(
        netid="The Magic Grader", name='The Magic Grader', email='')

    sidekick = Grader.objects.create(
        netid="The Sneaky Sidekick", name='The Sneaky Sidekick', email="")

    for trips_year in YEARS:
        if not TripsYear.objects.filter(year=trips_year).exists():
            continue

        log.info('Starting on {}'.format(trips_year))

        hard_question = ScoreQuestion.objects.create(
            question='Hard skills', order=0, trips_year_id=trips_year)
        soft_question = ScoreQuestion.objects.create(
            question='Soft skills', order=1, trips_year_id=trips_year)

        tags = QualificationTag.objects.filter(trips_year_id=trips_year)

        # A question for each QualificationTag
        tag_questions = {
            tag: ScoreQuestion.objects.create(
                question="Qualified for {}?".format(tag.name),
                order=order,
                trips_year_id=trips_year)
            for order, tag in enumerate(tags, 2)}

        # Arbitrary date
        date = timezone.make_aware(datetime(year=trips_year, month=3, day=1))

        for grade in CrooApplicationGrade.objects.filter(trips_year_id=trips_year):
            try:
                with transaction.atomic():
                    score = Score.objects.create(
                        trips_year_id=trips_year,
                        grader=grade.grader,
                        application=grade.application.application,
                        croo_score=grade.grade,
                        created_at=date,
                        general=grade.comment)
            except IntegrityError:
                log.info('Duplicate croo grade: {}'.format(grade))
                score = Score.objects.create(
                    trips_year_id=trips_year,
                    grader=magic_man,
                    application=grade.application.application,
                    croo_score=grade.grade,
                    created_at=date,
                    general='(Originally by {}) '.format(grade.grader.name) + grade.comment)

            ScoreComment.objects.create(score=score, question=hard_question,
                                        comment=grade.hard_skills)

            ScoreComment.objects.create(score=score, question=soft_question,
                                        comment=grade.soft_skills)

            for tag in grade.qualifications.all():
                ScoreComment.objects.create(
                    score=score, question=tag_questions[tag], comment="yes")

        for grade in LeaderApplicationGrade.objects.filter(trips_year_id=trips_year):
            try:
                with transaction.atomic():
                    score = Score.objects.create(
                        trips_year_id=trips_year,
                        grader=grade.grader,
                        application=grade.application.application,
                        leader_score=grade.grade,
                        created_at=date,
                        general=grade.comment)
            except IntegrityError:
                log.info('Duplicate leader grade: {}'.format(grade))

                try:
                    with transaction.atomic():
                        score = Score.objects.create(
                            trips_year_id=trips_year,
                            grader=magic_man,
                            application=grade.application.application,
                            leader_score=grade.grade,
                            created_at=date,
                            general='(Originally by {}) '.format(grade.grader.name) + grade.comment)
                except IntegrityError:
                    score = Score.objects.create(
                        trips_year_id=trips_year,
                        grader=sidekick,
                        application=grade.application.application,
                        leader_score=grade.grade,
                        created_at=date,
                        general='(Originally by {}) '.format(grade.grader.name) + grade.comment)

            ScoreComment.objects.create(score=score, question=hard_question,
                                        comment=grade.hard_skills)

            ScoreComment.objects.create(score=score, question=soft_question,
                                        comment=grade.soft_skills)

        for old_skip in SkippedLeaderGrade.objects.filter(trips_year_id=trips_year):
            try:
                with transaction.atomic():
                    Skip.objects.create(
                        trips_year_id=trips_year,
                        grader=old_skip.grader,
                        application=old_skip.application.application,
                        created_at=date)
            except IntegrityError:
                log.info('Duplicate leader skip: {}'.format(old_skip))

        for old_skip in SkippedCrooGrade.objects.filter(trips_year_id=trips_year):
            try:
                with transaction.atomic():
                    Skip.objects.create(
                        trips_year_id=trips_year,
                        grader=old_skip.grader,
                        application=old_skip.application.application,
                        created_at=date)
            except IntegrityError:
                log.info('Duplicate croo skip: {}'.format(old_skip))


class Migration(migrations.Migration):

    dependencies = [
        ('applications', '0103_merge_20180406_0945'),
        ('core', '0001_initial')
    ]

    operations = [
        migrations.RunPython(merge_legacy_scores)
    ]
